// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace NorthwindDemo
{

    // ApiKey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class ApiKeyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ApiKey>
    {
        public ApiKeyConfiguration()
            : this("dbo")
        {
        }

        public ApiKeyConfiguration(string schema)
        {
            ToTable("ApiKey", schema);
            HasKey(x => x.ApiKeyId);

            Property(x => x.ApiKeyId).HasColumnName(@"ApiKeyId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Key).HasColumnName(@"Key").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.LastLogin).HasColumnName(@"LastLogin").HasColumnType("datetime").IsRequired();
            Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("bigint").IsRequired();
            Property(x => x.UserAccountId).HasColumnName(@"UserAccountId").HasColumnType("bigint").IsOptional();
            Property(x => x.UseCId).HasColumnName(@"USE_cID").HasColumnType("uniqueidentifier").IsOptional();

            // Foreign keys
            HasOptional(a => a.UserAccount).WithMany(b => b.ApiKeys).HasForeignKey(c => c.UserAccountId).WillCascadeOnDelete(false); // FK_AKE_ApiKeys_USA_UserAccounts1
            HasOptional(a => a.UseUser).WithMany(b => b.ApiKeys).HasForeignKey(c => c.UseCId).WillCascadeOnDelete(false); // FK_ApiKey_USE_Users
            HasRequired(a => a.Application).WithMany(b => b.ApiKeys).HasForeignKey(c => c.ApplicationId).WillCascadeOnDelete(false); // FK_AKE_ApiKeys_APP_Applications
        }
    }

}
// </auto-generated>
