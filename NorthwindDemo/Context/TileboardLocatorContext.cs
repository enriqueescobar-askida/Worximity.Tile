// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7

#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace NorthwindDemo.Context
{
    using NorthwindDemo.Configurations;
    using NorthwindDemo.Entities;
    using NorthwindDemo.Interfaces;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class TileboardLocatorContext : System.Data.Entity.DbContext, ITileboardLocatorContext
    {
        public System.Data.Entity.DbSet<ApiKey> ApiKeys { get; set; } // ApiKey
        public System.Data.Entity.DbSet<ApiRequestLog> ApiRequestLogs { get; set; } // ApiRequestLog
        public System.Data.Entity.DbSet<Application> Applications { get; set; } // Application
        public System.Data.Entity.DbSet<CliClient> CliClients { get; set; } // CLI_Clients
        public System.Data.Entity.DbSet<Company> Companies { get; set; } // Company
        public System.Data.Entity.DbSet<CseClientSensor> CseClientSensors { get; set; } // CSE_ClientSensors
        public System.Data.Entity.DbSet<DonDomainName> DonDomainNames { get; set; } // DON_DomainName
        public System.Data.Entity.DbSet<FdcFormDefinitionVersionClient> FdcFormDefinitionVersionClients { get; set; } // FDC_FormDefinitionVersionClients
        public System.Data.Entity.DbSet<FdvFormDefinitionVersion> FdvFormDefinitionVersions { get; set; } // FDV_FormDefinitionVersions
        public System.Data.Entity.DbSet<FodFormDefinition> FodFormDefinitions { get; set; } // FOD_FormDefinitions
        public System.Data.Entity.DbSet<FstFormSyncTask> FstFormSyncTasks { get; set; } // FST_FormSyncTasks
        public System.Data.Entity.DbSet<HfdHistoryFormDefinitionVersion> HfdHistoryFormDefinitionVersions { get; set; } // HFD_HistoryFormDefinitionVersions
        public System.Data.Entity.DbSet<IpsIpServer> IpsIpServers { get; set; } // IPS_IpServers
        public System.Data.Entity.DbSet<KitTemplate> KitTemplates { get; set; } // KitTemplate
        public System.Data.Entity.DbSet<KitTemplateAttribute> KitTemplateAttributes { get; set; } // KitTemplateAttribute
        public System.Data.Entity.DbSet<KitTemplateMeasureDefinition> KitTemplateMeasureDefinitions { get; set; } // KitTemplateMeasureDefinition
        public System.Data.Entity.DbSet<LoeLogException> LoeLogExceptions { get; set; } // LOE_LogExceptions
        public System.Data.Entity.DbSet<PrePreference> PrePreferences { get; set; } // PRE_Preferences
        public System.Data.Entity.DbSet<Right> Rights { get; set; } // Right
        public System.Data.Entity.DbSet<RightAction> RightActions { get; set; } // RightAction
        public System.Data.Entity.DbSet<SerServer> SerServers { get; set; } // SER_Servers
        public System.Data.Entity.DbSet<UnoUserNotice> UnoUserNotices { get; set; } // UNO_UserNotices
        public System.Data.Entity.DbSet<UserAccount> UserAccounts { get; set; } // UserAccount
        public System.Data.Entity.DbSet<UserAccountClient> UserAccountClients { get; set; } // UserAccountClient
        public System.Data.Entity.DbSet<UserAccountGroup> UserAccountGroups { get; set; } // UserAccountGroup
        public System.Data.Entity.DbSet<UseUser> UseUsers { get; set; } // USE_Users
        public System.Data.Entity.DbSet<VerVersion> VerVersions { get; set; } // VER_Versions

        static TileboardLocatorContext()
        {
            System.Data.Entity.Database.SetInitializer<TileboardLocatorContext>(null);
        }

        public TileboardLocatorContext()
            : base("Name=TileboardLocatorContext")
        {
        }

        public TileboardLocatorContext(string connectionString)
            : base(connectionString)
        {
        }

        public TileboardLocatorContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public TileboardLocatorContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public TileboardLocatorContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Conventions.Add(new CodeFirstStoreFunctions.FunctionsConvention<TileboardLocatorContext>("dbo"));

            modelBuilder.Configurations.Add(new ApiKeyConfiguration());
            modelBuilder.Configurations.Add(new ApiRequestLogConfiguration());
            modelBuilder.Configurations.Add(new ApplicationConfiguration());
            modelBuilder.Configurations.Add(new CliClientConfiguration());
            modelBuilder.Configurations.Add(new CompanyConfiguration());
            modelBuilder.Configurations.Add(new CseClientSensorConfiguration());
            modelBuilder.Configurations.Add(new DonDomainNameConfiguration());
            modelBuilder.Configurations.Add(new FdcFormDefinitionVersionClientConfiguration());
            modelBuilder.Configurations.Add(new FdvFormDefinitionVersionConfiguration());
            modelBuilder.Configurations.Add(new FodFormDefinitionConfiguration());
            modelBuilder.Configurations.Add(new FstFormSyncTaskConfiguration());
            modelBuilder.Configurations.Add(new HfdHistoryFormDefinitionVersionConfiguration());
            modelBuilder.Configurations.Add(new IpsIpServerConfiguration());
            modelBuilder.Configurations.Add(new KitTemplateConfiguration());
            modelBuilder.Configurations.Add(new KitTemplateAttributeConfiguration());
            modelBuilder.Configurations.Add(new KitTemplateMeasureDefinitionConfiguration());
            modelBuilder.Configurations.Add(new LoeLogExceptionConfiguration());
            modelBuilder.Configurations.Add(new PrePreferenceConfiguration());
            modelBuilder.Configurations.Add(new RightConfiguration());
            modelBuilder.Configurations.Add(new RightActionConfiguration());
            modelBuilder.Configurations.Add(new SerServerConfiguration());
            modelBuilder.Configurations.Add(new UnoUserNoticeConfiguration());
            modelBuilder.Configurations.Add(new UserAccountConfiguration());
            modelBuilder.Configurations.Add(new UserAccountClientConfiguration());
            modelBuilder.Configurations.Add(new UserAccountGroupConfiguration());
            modelBuilder.Configurations.Add(new UseUserConfiguration());
            modelBuilder.Configurations.Add(new VerVersionConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ApiKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new ApiRequestLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ApplicationConfiguration(schema));
            modelBuilder.Configurations.Add(new CliClientConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new CseClientSensorConfiguration(schema));
            modelBuilder.Configurations.Add(new DonDomainNameConfiguration(schema));
            modelBuilder.Configurations.Add(new FdcFormDefinitionVersionClientConfiguration(schema));
            modelBuilder.Configurations.Add(new FdvFormDefinitionVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new FodFormDefinitionConfiguration(schema));
            modelBuilder.Configurations.Add(new FstFormSyncTaskConfiguration(schema));
            modelBuilder.Configurations.Add(new HfdHistoryFormDefinitionVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new IpsIpServerConfiguration(schema));
            modelBuilder.Configurations.Add(new KitTemplateConfiguration(schema));
            modelBuilder.Configurations.Add(new KitTemplateAttributeConfiguration(schema));
            modelBuilder.Configurations.Add(new KitTemplateMeasureDefinitionConfiguration(schema));
            modelBuilder.Configurations.Add(new LoeLogExceptionConfiguration(schema));
            modelBuilder.Configurations.Add(new PrePreferenceConfiguration(schema));
            modelBuilder.Configurations.Add(new RightConfiguration(schema));
            modelBuilder.Configurations.Add(new RightActionConfiguration(schema));
            modelBuilder.Configurations.Add(new SerServerConfiguration(schema));
            modelBuilder.Configurations.Add(new UnoUserNoticeConfiguration(schema));
            modelBuilder.Configurations.Add(new UserAccountConfiguration(schema));
            modelBuilder.Configurations.Add(new UserAccountClientConfiguration(schema));
            modelBuilder.Configurations.Add(new UserAccountGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new UseUserConfiguration(schema));
            modelBuilder.Configurations.Add(new VerVersionConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int UseUpdateDev()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[USE_UpdateDev] ", procResultParam);

            return (int) procResultParam.Value;
        }

        // Table Valued Functions
    }
}
// </auto-generated>
