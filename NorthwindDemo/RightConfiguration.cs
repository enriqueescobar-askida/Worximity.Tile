// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace NorthwindDemo
{

    // Right
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class RightConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Right>
    {
        public RightConfiguration()
            : this("dbo")
        {
        }

        public RightConfiguration(string schema)
        {
            ToTable("Right", schema);
            HasKey(x => x.RightId);

            Property(x => x.RightId).HasColumnName(@"RightId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RightActionId).HasColumnName(@"RightActionId").HasColumnType("bigint").IsRequired();
            Property(x => x.UserAccountGroupId).HasColumnName(@"UserAccountGroupId").HasColumnType("bigint").IsOptional();
            Property(x => x.DatabaseOwnerOnly).HasColumnName(@"DatabaseOwnerOnly").HasColumnType("bit").IsOptional();
            Property(x => x.CanCreate).HasColumnName(@"CanCreate").HasColumnType("bit").IsRequired();
            Property(x => x.CanRead).HasColumnName(@"CanRead").HasColumnType("bit").IsRequired();
            Property(x => x.CanUpdate).HasColumnName(@"CanUpdate").HasColumnType("bit").IsRequired();
            Property(x => x.CanDelete).HasColumnName(@"CanDelete").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasOptional(a => a.UserAccountGroup).WithMany(b => b.Rights).HasForeignKey(c => c.UserAccountGroupId).WillCascadeOnDelete(false); // FK_RIG_Rights_UAG_UserAccountGroups
            HasRequired(a => a.RightAction).WithMany(b => b.Rights).HasForeignKey(c => c.RightActionId).WillCascadeOnDelete(false); // FK_Right_RightAction
        }
    }

}
// </auto-generated>
